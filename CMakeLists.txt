cmake_minimum_required(VERSION 3.14)
project(vpn_manager CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Adding userver dependency
find_package(userver COMPONENTS core postgresql REQUIRED)
if(NOT userver_FOUND) # Fallback to subdirectory usage
  # Enable userver libraries that are needed in this project
  set(USERVER_FEATURE_POSTGRESQL ON CACHE BOOL "" FORCE)

  # Compatibility mode: some systems don't support these features
  set(USERVER_FEATURE_CRYPTOPP_BLAKE2 OFF CACHE BOOL "" FORCE)
  set(USERVER_FEATURE_GRPC_CHANNELZ OFF CACHE BOOL "" FORCE)
  set(USERVER_FEATURE_REDIS_HI_MALLOC ON CACHE BOOL "" FORCE)

  if(EXISTS third_party/userver)
    message(STATUS "Using userver framework from third_party/userver")
    add_subdirectory(third_party/userver)
  else()
    message(FATAL_ERROR "Either install the userver or provide a path to it")
  endif()
endif()

userver_setup_environment()

include(FetchContent)

FetchContent_Declare(
  nlohmann_json
  GIT_REPOSITORY https://github.com/nlohmann/json.git
  GIT_TAG v3.11.3
)
FetchContent_Declare(
  jwt-cpp
  GIT_REPOSITORY https://github.com/Thalhammer/jwt-cpp.git
  GIT_TAG v0.7.0
)

FetchContent_MakeAvailable(nlohmann_json)
FetchContent_MakeAvailable(jwt-cpp)

# Common sources
add_library(${PROJECT_NAME}_objs OBJECT
  src/constants.hpp

  src/helpers/email_helper.hpp
  src/helpers/email_helper.cpp
  src/helpers/phone_helper.hpp
  src/helpers/phone_helper.cpp
  src/helpers/datetime_helper.hpp
  src/helpers/datetime_helper.cpp
  src/helpers/string_convertible_checker.hpp

  src/models/user_dto.hpp
  src/models/response.hpp

  src/repositories/user_repository/user_repository.hpp
  src/repositories/user_repository/user_repository.cpp
  src/repositories/key_repository/key_repository.hpp
  src/repositories/key_repository/key_repository.cpp

  src/handlers/v1/user/get-by-username/view.hpp
  src/handlers/v1/user/get-by-username/view.cpp
  src/handlers/v1/user/create-user/view.hpp
  src/handlers/v1/user/create-user/view.cpp

  src/handlers/v1/key/create-key/view.hpp
  src/handlers/v1/key/create-key/view.cpp
  src/handlers/v1/key/get-by-id/view.hpp
  src/handlers/v1/key/get-by-id/view.cpp
  src/handlers/v1/key/get-by-name/view.hpp
  src/handlers/v1/key/get-by-name/view.cpp
)
target_link_libraries(${PROJECT_NAME}_objs PUBLIC userver::postgresql)


# The Service
add_executable(${PROJECT_NAME} src/main.cpp)
target_link_libraries(${PROJECT_NAME} PRIVATE
  ${PROJECT_NAME}_objs
  nlohmann_json::nlohmann_json
  jwt-cpp
)

target_include_directories(${PROJECT_NAME}
  PRIVATE
  ${CMAKE_CURRENT_SOURCE_DIR}
)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)

# Unit Tests
add_executable(${PROJECT_NAME}_unittest)
target_link_libraries(${PROJECT_NAME}_unittest PRIVATE ${PROJECT_NAME}_objs userver::utest)
add_google_tests(${PROJECT_NAME}_unittest)


# Benchmarks
add_executable(${PROJECT_NAME}_benchmark)
target_link_libraries(${PROJECT_NAME}_benchmark PRIVATE ${PROJECT_NAME}_objs userver::ubench)
add_google_benchmark_tests(${PROJECT_NAME}_benchmark)


# Functional Tests
userver_testsuite_add_simple()


# Install
include(GNUInstallDirs)

if(DEFINED ENV{PREFIX})
  message(STATUS "Set install prefix: $ENV{PREFIX}")
  file(TO_CMAKE_PATH "$ENV{PREFIX}" PREFIX_PATH)
  set(CMAKE_INSTALL_PREFIX ${PREFIX_PATH})
endif()

file(GLOB CONFIGS_FILES ${CMAKE_CURRENT_SOURCE_DIR}/configs/*.yaml ${CMAKE_CURRENT_SOURCE_DIR}/configs/*.json)

install(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${PROJECT_NAME})
install(FILES ${CONFIGS_FILES} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${PROJECT_NAME} COMPONENT ${PROJECT_NAME})
